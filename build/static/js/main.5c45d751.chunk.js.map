{"version":3,"sources":["scripts/views/index.js","scripts/reducers/data.js","scripts/reducers/index.js","scripts/store.js","scripts/index.js","App.js","serviceWorker.js","index.js","utils/lazyload.js"],"names":["MainLayout","history","this","props","location","className","path","exact","render","to","component","LazyLoad","Component","childContextTypes","PropTypes","object","defaultState","immutable","fromJS","count","Likelist","getProductdetail","reducers","combineReducers","data","state","action","console","log","type","set","payload","store","createStore","applyMiddleware","thunk","promise","MainRouter","basename","App","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","loadingComponent","loader","loading","Loadable"],"mappings":"wSAeqBA,E,0LAEb,MAAO,CACHC,QAASC,KAAKC,MAAMF,QACpBG,SAAUF,KAAKC,MAAMC,Y,+BAIzB,OACI,yBAAKC,UAAU,QACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAAO,kBAAC,IAAD,CAAUC,GAAG,cAClD,kBAAC,IAAD,CAAOH,KAAK,SAASI,UAAWC,aAAS,kBAAM,iEAC/C,kBAAC,IAAD,CAAOL,KAAK,SAASI,UAAWC,aAAS,kBAAM,wEAC/C,kBAAC,IAAD,CAAOL,KAAK,UAAUI,UAAWC,aAAS,kBAAM,0DAChD,kBAAC,IAAD,CAAOL,KAAK,QAAQI,UAAWC,aAAS,kBAAM,wEAC9C,kBAAC,IAAD,CAAOL,KAAK,cAAcI,UAAWC,aAAS,kBAAM,gEACpD,kBAAC,IAAD,CAAOL,KAAK,gBAAgBI,UAAWC,aAAS,kBAAM,wEACtD,kBAAC,IAAD,CAAOH,OAAQ,kBAAO,kBAAC,IAAD,CAAUC,GAAG,oB,GAlBfG,aA0BxCZ,EAAWa,kBAAoB,CAC3BZ,QAASa,IAAUC,OACnBX,SAAUU,IAAUC,Q,6CCxClBC,E,MAAeC,QAAUC,OAAO,CAClCC,MAAO,IACPC,SAAU,GACVC,iBAAkB,OCFTC,EAAWC,0BAAgB,CACpCC,KDIgB,WAAmC,IAAlCC,EAAiC,uDAAzBT,EAAcU,EAAW,uCAGlD,OAFAC,QAAQC,IAAIF,GAEJA,EAAOG,MAEX,IAAK,cACD,OAAOJ,EAAMK,IAAI,WAAYJ,EAAOK,SAGxC,IAAK,mBACD,OAAON,EAAMK,IAAI,gBAAiBJ,EAAOK,SAG7C,QACI,OAAON,MEbJO,EAFDC,YAAYX,EAAUY,YAAgBC,IAAOC,M,QCG9CC,EAAb,iLAEQ,OACI,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,IAAD,CACIM,SAAS,IAET,kBAAC,IAAD,CAAO5B,UAAWV,UAPtC,GAAgCY,aCGjB2B,MARf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,QCGcmC,QACW,cAA7BC,OAAOrC,SAASsC,UAEe,UAA7BD,OAAOrC,SAASsC,UAEhBD,OAAOrC,SAASsC,SAASC,MACvB,2D,MCVNC,IAASpC,OAAO,kBAAC,EAAD,MAASqC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,gBCpHnBzB,QAAQC,IAAI,8B,+BCfZ,qCAMMyB,EAAmB,WACrB,OACI,yCAMO,aAACC,GAAwC,IAAhCC,EAA+B,uDAArBF,EAC9B,OAAOG,IAAS,CACZF,SACAC,e","file":"static/js/main.5c45d751.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport {\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n} from \"react-router-dom\";\r\n\r\nimport LazyLoad from \"&/lazyload\";\r\n\r\nimport PropTypes from \"prop-types\"\r\n\r\n\r\n\r\n//所有的路由在这里配置\r\nexport default class MainLayout extends Component {\r\n    getChildContext() {\r\n        return {\r\n            history: this.props.history,\r\n            location: this.props.location\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"main\">\r\n                <Switch>\r\n                    <Route path=\"/\" exact render={() => (<Redirect to=\"/guide\" />)} />\r\n                    <Route path=\"/guide\" component={LazyLoad(() => import(\"./guide\"))} />\r\n                    <Route path=\"/login\" component={LazyLoad(() => import(\"./login\"))} />\r\n                    <Route path=\"/search\" component={LazyLoad(() => import(\"./search\"))} />\r\n                    <Route path=\"/main\" component={LazyLoad(() => import(\"./main\"))} />\r\n                    <Route path=\"/detail/:id\" component={LazyLoad(() => import(\"./productdetail\"))} />\r\n                    <Route path=\"/purchase/:id\" component={LazyLoad(() => import(\"./purchase\"))} />\r\n                    <Route render={() => (<Redirect to=\"/guide\" />)} />\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nMainLayout.childContextTypes = {\r\n    history: PropTypes.object,\r\n    location: PropTypes.object\r\n}","import immutable from \"immutable\"\r\n\r\n\r\nconst defaultState = immutable.fromJS({\r\n    count: 2000,\r\n    Likelist: [],\r\n    getProductdetail: null\r\n})\r\n\r\nexport const data = (state = defaultState, action) => {\r\n    console.log(action)\r\n\r\n    switch (action.type) {\r\n\r\n        case \"getLikelist\":\r\n            return state.set(\"Likelist\", action.payload)\r\n            break\r\n\r\n        case \"getProductdetail\":\r\n            return state.set(\"productdetail\", action.payload)\r\n            break\r\n\r\n        default:\r\n            return state\r\n            break\r\n    }\r\n}\r\n\r\n","import { combineReducers } from \"redux-immutable\";\r\nimport { data } from \"./data\";\r\n\r\n\r\nexport const reducers = combineReducers({\r\n    data:data\r\n})","\r\nimport { createStore, applyMiddleware } from \"redux\";\r\n\r\nimport thunk from \"redux-thunk\";\r\nimport promise from \"redux-promise\"\r\n\r\nimport { reducers } from './reducers';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk, promise));     // 改造 store.dispacth  \r\n\r\nexport default store;\r\n\r\n","import React, { Component } from \"react\";\r\n\r\nimport {\r\n    HashRouter as Hash,\r\n    Route\r\n} from \"react-router-dom\";\r\n\r\nimport MainLayout from \"./views\"\r\nimport store from \"./store\"\r\nimport { Provider } from \"react-redux\"\r\n\r\nexport class MainRouter extends Component {\r\n    render() {\r\n        return (\r\n            <Provider store={store}>\r\n                <Hash\r\n                    basename=\"\"\r\n                >\r\n                    <Route component={MainLayout}></Route>\r\n                </Hash>\r\n            </Provider>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\nimport { MainRouter } from \"~\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRouter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"@/styles/index.scss\"     //引入公共主样式\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\nconsole.log(\"this is my react-project!\")\n","\r\n\r\n// 路由懒加载 \r\nimport React from \"react\";\r\nimport Loadable from \"react-loadable\"\r\n\r\n\r\n// 通用的 loading组件 \r\nconst loadingComponent = () => {\r\n    return (\r\n        <div>loading</div>\r\n    )\r\n}\r\n\r\n\r\n//   loading组件  通用的 如果传入 loading  有动画 \r\nexport default (loader, loading = loadingComponent) => {\r\n    return Loadable({\r\n        loader,     // 需要懒加载的组件 \r\n        loading\r\n    })\r\n}"],"sourceRoot":""}